int PinIn = A3;
int Inval = 0;

int Dutyval = 0;
int Freqval = 0;

int ESCpin = 5;
int PWMval = 0;
const byte pwmLED = 9;

// define directions for LED fade
#define UP 0
#define DOWN 1

// constants for min and max PWM
const int minPWM = 0;
const int maxPWM = 255;

// State Variable for Fade Direction
byte fadeDirection = UP;

// Global Fade Value
// but be bigger than byte and signed, for rollover
int fadeValue = 0;

// How smooth to fade?
byte fadeIncrement = 5;

// millis() timing Variable, just for fading
unsigned long previousFadeMillis;

// How fast to increment?
int fadeInterval = 50;

void setup() {
  analogWrite(pwmLED, fadeValue);
  pinMode(5, OUTPUT); // drive esc

}
void doTheFade(unsigned long thisMillis) {
  // is it time to update yet?
  // if not, nothing happens
  if (thisMillis - previousFadeMillis >= fadeInterval) {
    // yup, it's time!
    if (fadeDirection == UP) {
      fadeValue = fadeValue + fadeIncrement;
      if (fadeValue >= maxPWM) {
        // At max, limit and change direction
        fadeValue = maxPWM;
        fadeDirection = DOWN;
      }
    } else {
      //if we aren't going up, we're going down
      fadeValue = fadeValue - fadeIncrement;
      if (fadeValue <= minPWM) {
        // At min, limit and change direction
        fadeValue = minPWM;
        fadeDirection = UP;
      }
    }
    // Only need to update when it changes
    analogWrite(pwmLED, fadeValue);

    // reset millis for the next iteration (fade timer only)
    previousFadeMillis = thisMillis;
  }
}
void loop() {
  unsigned long currentMillis = millis();

  doTheFade(currentMillis);





  //REAL DEAL ++++++++++
  Inval = analogRead(PinIn);  // read the input pin
  Dutyval = map(Inval, 0, 1023, 8000, 17500);

  digitalWrite(ESCpin, HIGH);
  delayMicroseconds(Dutyval);
  digitalWrite(ESCpin, LOW);
  delay(60);
  //REAL DEAL ++++++++++



 PWMval = map(Inval, 0, 1023, 0, 255);

  analogWrite(10, PWMval);
  analogWrite(11, (255 - PWMval));




}
